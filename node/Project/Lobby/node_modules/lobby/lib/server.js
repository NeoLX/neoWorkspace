'use strict'

var fs = require('fs');
var events = require('events');
var PATH = require("path");
var util = require('util');
var express = require('express');
var webApp = require('./webApp.js');
// var path = require('path');
// var cookie = require('cookie');
// var uuid = require('uuid');

function Server(path){
    
    var _app, _serverConfig, _defConfig, _status;
    var _webpool = [];
    
    this.init = function (path) {
        var self = this;
        _app = express();
        
        //初始化事件
		this.on(Server.Handles.onInited, initedHandle);
		this.on(Server.Handles.onStatusChange, statusChangeHandle);
        
        fs.readFile(path + "/server.json", 'utf8', function (err, data) {
            self.setServerConfig(JSON.parse(data));
            console.log("ServerConfig Ready");
            self.setStatus(Server.Status.WebConfigReady);
        });
           
        fs.readFile(PATH.normalize(__dirname + "/../config/server.json"), 'utf8', function (err, data) {
            self.setDefConfig(JSON.parse(data));
            console.log("DefConfig Ready");
            self.setStatus(Server.Status.DefConfigReady);
        });
    };
    
    this.start = function(){
        _app.listen(8081);
    }
    
    //服务器启动事件
	var initedHandle = function(){
		//加载服务器配置
        // this.serverConf = require(this._rootDir + '/server.json');
        
        console.log("111");
        
        readDir();
        
        //服务器初始化完成
		this.setStatus(Server.Status.SERVER_INITED);
	}
    
    //状态变化总控
    var	statusChangeHandle = function(){
		switch(_status){
				case Server.Status.Inited:
					this.emit(Server.Handles.onInited);
                    break;                    
				default:
					break;
			}
	}
    
    //更新状态	
    this.setStatus = function (status) {
        
        if(_status != status){
            if((_status == Server.Status.ServerConfigReady
                && status == Server.Status.DefConfigReady)
                || (status == Server.Status.ServerConfigReady
                && _status == Server.Status.DefConfigReady)){
                    _status = Server.Status.Inited;
            }else{
            
                _status = status;    
            }
                        
            console.log("Server Status Change:" + _status);
            this.emit(Server.Handles.onStatusChange);
        }
    }
    
    //读web容器
    var readDir = function(){
        var self = this;
        var files = fs.readdir(path);
        
        console.log("Reading dir");
        if(files){
            files.forEach(function(file){
                
                console.log("Reading file:" + file);
                
                var stats = fs.statSync(path + file);
                if(stats.isDirectory){
                    self.addWebapp(path + file);
                }
            });   
        }
    }
    
    this.addWebapp = function(p){
        console.log(p);
        var app = new webApp(_app, p);
        
        if(app){
        
            _webPool.push(app);   
        }
    }
	
    this.setServerConfig = function (conf) {
        _serverConfig = conf;
    }
    this.setDefConfig = function (conf) {
        _defConfig = conf;
    }
    
    if(path){
        this.init(path);
    }
}
util.inherits(Server,events.EventEmitter);

Server.Handles = {};
Server.Handles.onStatusChange = "ON_STATUS_CHANGE";
Server.Handles.onInited = "ON_INITED";

Server.Status = {};
Server.Status.ServerConfigReady = 1;
Server.Status.DefConfigReady = 2;
Server.Status.Inited = 100;

module.exports = Server;