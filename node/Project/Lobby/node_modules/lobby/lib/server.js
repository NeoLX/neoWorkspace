'use strict'

var fs = require('fs');
var events = require('events');
var PATH = require("path");
var util = require('util');
var express = require('express');
var webApp = require('./webApp.js');
// var path = require('path');
// var cookie = require('cookie');
// var uuid = require('uuid');

function AppBase(){
    
    var _app, _AppBaseConfig, _defConfig, _status;
    var _webpool = [];
    
    this._err;
    
    this.init = function (path) {
                
        //初始化事件
		this.on(AppBase.Handles.onInited, initedHandle);
		this.on(AppBase.Handles.onStatusChange, statusChangeHandle);
		this.on(AppBase.Handles.onException, exceptionHandle);
        
        fs.readFile(path + "/AppBase.json", 'utf8', function (err, data) {
            
            if(err){
                self.err = err;
                self.setStatus(AppBase.Status.AppBaseConfigFalse);
            }
            
            self.setAppBaseConfig(JSON.parse(data));
            console.log("AppBaseConfig Ready");
            self.setStatus(AppBase.Status.AppBaseConfigReady);
        });
           
        fs.readFile(PATH.normalize(__dirname + "/../config/AppBase.json"), 'utf8', function (err, data) {
            
            if(err){
                self.err = err;
                self.setStatus(AppBase.Status.DefConfigFalse);
            }
            
            self.setDefConfig(JSON.parse(data));
            console.log("DefConfig Ready");
            self.setStatus(AppBase.Status.DefConfigReady);
        });
    };
    
    this.start = function(){
        _app.listen(8081);
    }
    
    var exceptionHandle = function(){
        
    }
    
    //服务器启动事件
	var initedHandle = function(){
		//加载服务器配置
        // this.AppBaseConf = require(this._rootDir + '/AppBase.json');
        
        console.log("111");
        
        readDir();
        
        //服务器初始化完成
		this.setStatus(AppBase.Status.AppBase_INITED);
	}
    
    //状态变化总控
    var	statusChangeHandle = function(){
		switch(_status){
				case AppBase.Status.Inited:
					this.emit(AppBase.Handles.onInited);
                    break;                    
				case AppBase.Status.AppBaseConfigFalse:
					this.emit(AppBase.Handles.onException);
                    break;                    
				case AppBase.Status.DefConfigFalses:
					this.emit(AppBase.Handles.onException);
                    break;                    
				default:
					break;
			}
	}
    
    //更新状态	
    this.setStatus = function (status) {
        
        if(_status != status){
            if((_status == AppBase.Status.AppBaseConfigReady
                && status == AppBase.Status.DefConfigReady)
                || (status == AppBase.Status.AppBaseConfigReady
                && _status == AppBase.Status.DefConfigReady)){
                    _status = AppBase.Status.Inited;
            }else{
            
                _status = status;    
            }
                        
            console.log("AppBase Status Change:" + _status);
            this.emit(AppBase.Handles.onStatusChange);
        }
    }
        
    if(path){
        this.init(path);
    }
}
util.inherits(AppBase,events.EventEmitter);

AppBase.Handles = {};
AppBase.Handles.onStatusChange = "ON_STATUS_CHANGE";
AppBase.Handles.onInited = "ON_INITED";
AppBase.Handles.onException = "ON_EXCEPTION";

AppBase.Status = {};
AppBase.Status.Inited = 100;

module.exports = AppBase;