'use strict'

var fs = require('fs');
var path = require('path');
var url = require('url');
var util = require('util');
var events = require('events');
var http = require('http');
var router = require('./router');
var express = require('express');

function Lobby(projectDir,containerRoot) {
    
    //express app
    this.app = express();
    //Lobby状态    
    this.status = Lobby.Status.CLOSE;
    
    //LOBBY状态控制
	this.statusChangeHandle = function(){
		switch(this.status){
				case Lobby.Status.SERVER_CREATING:
					this.emit(Lobby.Handles.SERVER_INIT);break;
				case Lobby.Status.SERVER_INITED:
					this.emit(Lobby.Handles.WEB_INIT);break;
				case Lobby.Status.WEB_INITED:
					this.emit(Lobby.Handles.SERVER_START);break;
                case Lobby.Status.RESTARTING:
                    this.emit(Lobby.Handles.RESTART);break;
				default:
					break;
			}
	}
    
    //LOBBY状态变更
	this.setStatus = function(status){
		this.status = status;
		this.emit(Lobby.Handles.STATUS_CHANGE);	
	}

    //LOBBY启动
	this.start = function(){
        //启动前执行内容        
		console.log("[LOBBY_START]");
        this.init();
        
        //启动完成
		this.setStatus(Lobby.Status.SERVER_CREATING);
	}

    //LOBBY初始化
	this.init = function(){
		console.log("[LOBBY_INITING]");
         
        if(!projectDir || projectDir.trim() == ""
            || !containerRoot || containerRoot.trim() == ""){
            console.log("[ROOT_DIC_ERROR]" + root);
            return;
        }else{
            this._projectDir = projectDir;
            this._containerRoot = containerRoot;
            this._rootDir = projectDir + containerRoot;
        }
               
		this.on(Lobby.Handles.SERVER_INIT, this.serverInitHandle);
		this.on(Lobby.Handles.WEB_INIT, this.webInitHandle);
		this.on(Lobby.Handles.SERVER_START, this.startServerHandle);
		this.on(Lobby.Handles.STATUS_CHANGE, this.statusChangeHandle);
		this.on(Lobby.Handles.RESTART, this.restartHandle);
	}

    //服务器启动事件
	this.serverInitHandle = function(){
		//加载服务器配置
        this.serverConf = require(this._rootDir + '/server.json');
        
        //服务器初始化完成
		this.setStatus(Lobby.Status.SERVER_INITED);
	}
    
    //WEB容器启动事件
	this.webInitHandle = function(){
		console.log('GETTING_WEB_CONFIG');
		var myserver = this;
		myserver.setStatus(Lobby.Status.WEB_CONFIG_READING);	

		this.readDir(myserver._rootDir, '/');
        this.setStatus(Lobby.Status.WEB_INITED);
	}
    
    //重新启动事件
	this.webInitHandle = function(){
		console.log('RESTARTING');
        
        if(this.server){
            this.server.close();
        }
        
        this.setStatus(Lobby.Status.WEB_INITED);
	}
    
    //SERVER启动事件
	this.startServerHandle = function(){
		console.log('SERVER_STARTING');

		var self = this;
        
        // this.app.use(cookieParser());
		
        
        //相应onRequest
		this.app.use(this.onRequest());

        console.log('timeout');
        this.server = self.app.listen(self.serverConf.port,
            function() {

                console.log("应用实例，访问地址为 http://%s:%s", server.address().address, server.address().port);

            });
            
        this.setStatus(Lobby.Status.SERVER_STARTED);
        
	}
       
	this.setWebConfig = function(){
		var self = this;

		return function(config){
            console.log("[ADD ROUTER]" + config.extras.path);
			self.app.use(config.extras.path, config);
		}
	}

	this.onRequest = function(req, rsp, next){

		var self = this;

		return function(req,rsp,next){

			// console.log(self.routerPool);

			// var pathname = url.parse(req.url).pathname;

			// var routerPath = self.getRouterPath(pathname);

			// self.routerPool[routerPath].route(req,rsp);
			
            console.log("ONREQ");
            
			next();
		};
	}
}
util.inherits(Lobby,events.EventEmitter);

Lobby.getInstance = function(){
	return new Lobby().init();
}

Lobby.Status = {};
Lobby.Status.CLOSE = 0;
Lobby.Status.SERVER_CREATING = 1;
Lobby.Status.SERVER_INITING = 100;
Lobby.Status.SERVER_INITED = 199;
Lobby.Status.WEB_INITING = 200;
Lobby.Status.WEB_CONFIG_READING = 210;
Lobby.Status.WEB_INITED = 299;
Lobby.Status.SERVER_STARTING = 300;
Lobby.Status.SERVER_STARTED = 400;
Lobby.Status.RESTARTING = 500;
Lobby.Status.SERVER_START_ERROR = 999;

Lobby.Handles = {};
Lobby.Handles.SERVER_INIT = "SERVER_INIT";
Lobby.Handles.WEB_INIT = "WEB_INIT";
// Lobby.Handles.WEB_CONFIG_READING = "WEB_CONFIG_READING";
Lobby.Handles.SERVER_START = "SERVER_START";
Lobby.Handles.STATUS_CHANGE = "STATUS_CHANGE";
Lobby.Handles.RESTART = "RESTART";

module.exports = Lobby;

// var ServerContext = function(){
// 	this.serve = null;

// 	this.serveStatic = function(path){
// 		console.log("[STATIC DIR]" + path);
// 		this.serve = serveStatic("D:/mygit/neoworkspace/node/webcontent", {"dotfiles":"allow"});
// 		console.log(this.serve);
// 	}
// }