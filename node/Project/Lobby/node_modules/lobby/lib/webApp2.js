'use strict'

var fs = require('fs');
var events = require('events');
var PATH = require("path");
var util = require('util');
var express = require('express');
var appbase = require('./appBase.js');
// var extend = require(PATH.normalize(__dirname + '/../utils/extendable.js'));
// var cookie = require('cookie');
// var uuid = require('uuid');

var WebApp = function (app, path) {

    var _app, _webConfig, _defConfig;
    var _router;

    //webapp初始化
    this.init = function (app, path) {
        this._super.init();

        console.log("WebApp initing");

        var self = this;
        _app = app;

        //初始化事件
        this.on(WebApp.Handles.onInited, initedHandle);
        // this.on(WebApp.Handles.onStatusChange, statusChangeHandle);

        var data;

        try {

            data = fs.readFileSync(path + "/web.json", 'utf8');

        } catch (e) {

            console.log("CANNOT_READ_WEB_CONFIG");
            console.log(e);
            try {

                data = fs.readFileSync(PATH.normalize(__dirname + "/../config/web.json"), 'utf8');
                console.log("USING_WEB_DEFAULT_CONFIG");
            } catch (e2) {

                console.log("CANNOT_READ_WEB_DEFAULT_CONFIG");
                console.log(e2);
                return;
            }
        }
        if (data) {

            self.setWebConfig(JSON.parse(data));
            console.log("WebConfig Ready");
            self.setStatus(WebApp.Status.WebConfigReady);

        } else {
            console.log("CANNOT_READ_WEB_CONFIG");
            return;

        }

        this.setStatus(WebApp.Status.Inited);

        // fs.readFile(PATH.normalize(__dirname + "/../config/web.json"), 'utf8', function (err, data) {
        //     if(err){
        //         console.log("WEBCONFIG_FILE_NOT_EXISTS:" + path + "/web.json");
        //     }else{
        //         self.setDefConfig(JSON.parse(data));
        //         console.log("DefConfig Ready");
        //         self.setStatus(WebApp.Status.DefConfigReady);
        //     }
        // });
    };

    //初始化完成后执行
    var initedHandle = function () {
        console.log("Inited 2");
        _router = express.Router();
        _router.use(express.static(path));

        _app.use(_webConfig.webapp.root, _router);
    }

    //更新状态	
    this.setStatus = function (status) {
        // console.log(this._status);
        if (this._status != status) {
            if ((this._status == WebApp.Status.WebConfigReady
                && status == WebApp.Status.DefConfigReady)
                || (status == WebApp.Status.WebConfigReady
                    && this._status == WebApp.Status.DefConfigReady)) {
                this._status = WebApp.Status.Inited;
            } else {
                this._status = status;
                // _status = status;    
            }

            // console.log("Webapp Status Change:" + _status);
            this.emit(appbase.Handles.onStatusChange);
        }
    }

    //添加路由
    this.addRouter = function (root, path) {
        var self = this;

        return function (exists) {
            if (exists) {
                router.getInstance(root, path, self.setWebConfig());
            }
        }
    }

    this.setWebConfig = function (conf) {
        _webConfig = conf;
    }
    this.setDefConfig = function (conf) {
        _defConfig = conf;
    }

    if (app && path) {
        this.init(app, path);
    }

    // return this;
    
    //状态变化总控
    this.statusChangeHandle = function() {
        // this._super.statusChangeHandle();
		console.log("sub status change handle");

        switch (this._status) {
            case WebApp.Status.Inited:
                this.emit(WebApp.Handles.onInited);
                break;
            default:
                break;
        }
    };
};
WebApp.prototype = new appbase();
WebApp.prototype._super = WebApp.prototype;
// WebApp.prototype._super = new appbase();
// WebApp.prototype.bind(WebApp.prototype._super);

//状态变化总控
WebApp.prototype._temp = WebApp.prototype.statusChangeHandle;
// WebApp.prototype._temp.apply(WebApp.prototype);
WebApp.prototype.statusChangeHandle = function() {
        this._temp();
		console.log("sub status change handle:status[" + this._status + "]");

        switch (this._status) {
            case WebApp.Status.Inited:
                this.emit(WebApp.Handles.onInited);
                break;
            default:
                break;
        }
    };

WebApp.Handles = {};
WebApp.Handles.onStatusChange = "ON_STATUS_CHANGE";
WebApp.Handles.onInited = "ON_INITED";

WebApp.Status = {};
WebApp.Status.WebConfigReady = 1;
WebApp.Status.DefConfigReady = 2;
WebApp.Status.Inited = 100;

module.exports = WebApp;